/**
 * This file was generated by st-open-api
 */
import {ErrorHandler} from '../interface/i-$-open-api';
import {IAcceptContractResponse} from '../interface/response/i-accept-contract-response';
import {ICreateChartResponse} from '../interface/response/i-create-chart-response';
import {ICreateShipShipScanResponse} from '../interface/response/i-create-ship-ship-scan-response';
import {ICreateShipSystemScanResponse} from '../interface/response/i-create-ship-system-scan-response';
import {ICreateShipWaypointScanResponse} from '../interface/response/i-create-ship-waypoint-scan-response';
import {ICreateSurveyResponse} from '../interface/response/i-create-survey-response';
import {IDeliverContractRequest} from '../interface/request/i-deliver-contract-request';
import {IDeliverContractResponse} from '../interface/response/i-deliver-contract-response';
import {IDockShipResponse} from '../interface/response/i-dock-ship-response';
import {IExtractResourcesRequest} from '../interface/request/i-extract-resources-request';
import {IExtractResourcesResponse} from '../interface/response/i-extract-resources-response';
import {IFulfillContractResponse} from '../interface/response/i-fulfill-contract-response';
import {IGetContractResponse} from '../interface/response/i-get-contract-response';
import {IGetContractsQueryParameter} from '../interface/parameter/i-get-contracts-query-parameter';
import {IGetContractsResponse} from '../interface/response/i-get-contracts-response';
import {IGetMyAgentResponse} from '../interface/response/i-get-my-agent-response';
import {IGetMyShipCargoResponse} from '../interface/response/i-get-my-ship-cargo-response';
import {IGetMyShipResponse} from '../interface/response/i-get-my-ship-response';
import {IGetMyShipsQueryParameter} from '../interface/parameter/i-get-my-ships-query-parameter';
import {IGetMyShipsResponse} from '../interface/response/i-get-my-ships-response';
import {IGetShipCooldownResponse} from '../interface/response/i-get-ship-cooldown-response';
import {IGetShipNavResponse} from '../interface/response/i-get-ship-nav-response';
import {IJettisonRequest} from '../interface/request/i-jettison-request';
import {IJettisonResponse} from '../interface/response/i-jettison-response';
import {IJumpShipRequest} from '../interface/request/i-jump-ship-request';
import {IJumpShipResponse} from '../interface/response/i-jump-ship-response';
import {INavigateShipRequest} from '../interface/request/i-navigate-ship-request';
import {INavigateShipResponse} from '../interface/response/i-navigate-ship-response';
import {IOrbitShipResponse} from '../interface/response/i-orbit-ship-response';
import {IPatchShipNavRequest} from '../interface/request/i-patch-ship-nav-request';
import {IPatchShipNavResponse} from '../interface/response/i-patch-ship-nav-response';
import {IPurchaseCargoRequest} from '../interface/request/i-purchase-cargo-request';
import {IPurchaseCargoResponse} from '../interface/response/i-purchase-cargo-response';
import {IPurchaseShipRequest} from '../interface/request/i-purchase-ship-request';
import {IPurchaseShipResponse} from '../interface/response/i-purchase-ship-response';
import {IRefuelShipResponse} from '../interface/response/i-refuel-ship-response';
import {ISellCargoRequest} from '../interface/request/i-sell-cargo-request';
import {ISellCargoResponse} from '../interface/response/i-sell-cargo-response';
import {IShipRefineRequest} from '../interface/request/i-ship-refine-request';
import {IShipRefineResponse} from '../interface/response/i-ship-refine-response';
import {ITransferCargoRequest} from '../interface/request/i-transfer-cargo-request';
import {ITransferCargoResponse} from '../interface/response/i-transfer-cargo-response';
import {IWarpShipRequest} from '../interface/request/i-warp-ship-request';
import {IWarpShipResponse} from '../interface/response/i-warp-ship-response';
import {RequestInterceptor} from '../interface/i-$-open-api';
import {ResponseInterceptor} from '../interface/i-$-open-api';
import {http} from '../function/http';
import {openApi} from '../function/open-api';

export class MyService {

    /*
     * Accept a contract.
     */
    acceptContract = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IAcceptContractResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/contracts/{contractId}/accept`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Command a ship to chart the current waypoint.
     * 
     * Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.
     * 
     * Charting a location will record your agent as the one who created the chart.
     */
    createChart = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ICreateChartResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/chart`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Activate your ship&#39;s sensor arrays to scan for ship information.
     */
    createShipShipScan = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ICreateShipShipScanResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/scan/ships`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Activate your ship&#39;s sensor arrays to scan for system information.
     */
    createShipSystemScan = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ICreateShipSystemScanResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/scan/systems`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Activate your ship&#39;s sensor arrays to scan for waypoint information.
     */
    createShipWaypointScan = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ICreateShipWaypointScanResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/scan/waypoints`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
     * 
     * Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     */
    createSurvey = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ICreateSurveyResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/survey`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Deliver cargo on a given contract.
     */
    deliverContract = async (body: IDeliverContractRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IDeliverContractResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/contracts/{contractId}/deliver`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Attempt to dock your ship at it&#39;s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     */
    dockShip = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IDockShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/dock`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     */
    extractResources = async (body: IExtractResourcesRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IExtractResourcesResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/extract`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Fulfill a contract
     */
    fulfillContract = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IFulfillContractResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/contracts/{contractId}/fulfill`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Get the details of a contract by ID.
     */
    getContract = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetContractResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/contracts/{contractId}`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * List all of your contracts.
     */
    getContracts = async (queryParameter: IGetContractsQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetContractsResponse> => {
    
        const queryParam = [
            {name: 'page', value: queryParameter.page},
            {name: 'limit', value: queryParameter.limit},
        ];
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/contracts`,
                queryParameter: queryParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Fetch your agent&#39;s details.
     */
    getMyAgent = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetMyAgentResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/agent`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Retrieve the details of your ship.
     */
    getMyShip = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetMyShipResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Retrieve the cargo of your ship.
     */
    getMyShipCargo = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetMyShipCargoResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/cargo`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Retrieve all of your ships.
     */
    getMyShips = async (queryParameter: IGetMyShipsQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetMyShipsResponse> => {
    
        const queryParam = [
            {name: 'page', value: queryParameter.page},
            {name: 'limit', value: queryParameter.limit},
        ];
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/ships`,
                queryParameter: queryParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
     * 
     * Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
     * 
     * Response returns a 204 status code (no-content) when the ship has no cooldown.
     */
    getShipCooldown = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetShipCooldownResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/cooldown`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Get the current nav status of a ship.
     */
    getShipNav = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetShipNavResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/nav`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Jettison cargo from your ship&#39;s cargo hold.
     */
    jettison = async (body: IJettisonRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IJettisonResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/jettison`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     */
    jumpShip = async (body: IJumpShipRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IJumpShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/jump`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.
     * 
     * To travel between systems, see the ship&#39;s warp or jump actions.
     */
    navigateShip = async (body: INavigateShipRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<INavigateShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/navigate`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Attempt to move your ship into orbit at it&#39;s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     */
    orbitShip = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IOrbitShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/orbit`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Update the nav data of a ship, such as the flight mode.
     */
    patchShipNav = async (body: IPatchShipNavRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IPatchShipNavResponse> => {
    
        const response = await http({
                method: 'PATCH',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/nav`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Purchase cargo.
     */
    purchaseCargo = async (body: IPurchaseCargoRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IPurchaseCargoResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/purchase`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Purchase a ship
     */
    purchaseShip = async (body: IPurchaseShipRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IPurchaseShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Refuel your ship from the local market.
     */
    refuelShip = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IRefuelShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/refuel`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Sell cargo.
     */
    sellCargo = async (body: ISellCargoRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ISellCargoResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/sell`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     */
    shipRefine = async (body: IShipRefineRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IShipRefineResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/refine`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Transfer cargo between ships.
     */
    transferCargo = async (body: ITransferCargoRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<ITransferCargoResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/transfer`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.
     */
    warpShip = async (body: IWarpShipRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IWarpShipResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/my/ships/{shipSymbol}/warp`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

}
