/**
 * This file was generated by st-open-api
 */
import { GetJumpGatePathParameter } from '../../interface/parameter/GetJumpGatePathParameter'
import { GetMarketPathParameter } from '../../interface/parameter/GetMarketPathParameter'
import { GetShipyardPathParameter } from '../../interface/parameter/GetShipyardPathParameter'
import { GetSystemPathParameter } from '../../interface/parameter/GetSystemPathParameter'
import { GetSystemWaypointsPathParameter } from '../../interface/parameter/GetSystemWaypointsPathParameter'
import { GetSystemWaypointsQueryParameter } from '../../interface/parameter/GetSystemWaypointsQueryParameter'
import { GetSystemsQueryParameter } from '../../interface/parameter/GetSystemsQueryParameter'
import { GetWaypointPathParameter } from '../../interface/parameter/GetWaypointPathParameter'
import { GetJumpGateResponse } from '../../interface/response/GetJumpGateResponse'
import { GetMarketResponse } from '../../interface/response/GetMarketResponse'
import { GetShipyardResponse } from '../../interface/response/GetShipyardResponse'
import { GetSystemResponse } from '../../interface/response/GetSystemResponse'
import { GetSystemWaypointsResponse } from '../../interface/response/GetSystemWaypointsResponse'
import { GetSystemsResponse } from '../../interface/response/GetSystemsResponse'
import { GetWaypointResponse } from '../../interface/response/GetWaypointResponse'

export class SystemsService {

    constructor(public config: {
        send: <T = void>(request: {
            method: string;
            url: string;
            queryParameter?: any;
            urlParameter?: any;
            headerParameter?: any;
            cookieParameter?: any;
            body?: any;
        }) => Promise<T>
    }) {
    }

    /*
     * Get jump gate details for a waypoint.
     */
    getJumpGate = async (urlParameter: GetJumpGatePathParameter, ): Promise<GetJumpGateResponse> => {
        return this.config.send<GetJumpGateResponse>({
                method: 'GET',
                url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     */
    getMarket = async (urlParameter: GetMarketPathParameter, ): Promise<GetMarketResponse> => {
        return this.config.send<GetMarketResponse>({
                method: 'GET',
                url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/market',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     */
    getShipyard = async (urlParameter: GetShipyardPathParameter, ): Promise<GetShipyardResponse> => {
        return this.config.send<GetShipyardResponse>({
                method: 'GET',
                url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Get the details of a system.
     */
    getSystem = async (urlParameter: GetSystemPathParameter, ): Promise<GetSystemResponse> => {
        return this.config.send<GetSystemResponse>({
                method: 'GET',
                url: '/systems/{systemSymbol}',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Return a list of all systems.
     */
    getSystems = async (queryParameter: GetSystemsQueryParameter, ): Promise<GetSystemsResponse> => {
        return this.config.send<GetSystemsResponse>({
                method: 'GET',
                url: '/systems',
                urlParameter: {},
                queryParameter: queryParameter,
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     */
    getSystemWaypoints = async (urlParameter: GetSystemWaypointsPathParameter, queryParameter: GetSystemWaypointsQueryParameter, ): Promise<GetSystemWaypointsResponse> => {
        return this.config.send<GetSystemWaypointsResponse>({
                method: 'GET',
                url: '/systems/{systemSymbol}/waypoints',
                urlParameter: urlParameter,
                queryParameter: queryParameter,
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * View the details of a waypoint.
     */
    getWaypoint = async (urlParameter: GetWaypointPathParameter, ): Promise<GetWaypointResponse> => {
        return this.config.send<GetWaypointResponse>({
                method: 'GET',
                url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

}
