/**
 * This file was generated by st-open-api
 */
import {ErrorHandler} from '../interface/i-$-open-api';
import {IGetJumpGateResponse} from '../interface/response/i-get-jump-gate-response';
import {IGetMarketResponse} from '../interface/response/i-get-market-response';
import {IGetShipyardResponse} from '../interface/response/i-get-shipyard-response';
import {IGetSystemResponse} from '../interface/response/i-get-system-response';
import {IGetSystemWaypointsQueryParameter} from '../interface/parameter/i-get-system-waypoints-query-parameter';
import {IGetSystemWaypointsResponse} from '../interface/response/i-get-system-waypoints-response';
import {IGetSystemsQueryParameter} from '../interface/parameter/i-get-systems-query-parameter';
import {IGetSystemsResponse} from '../interface/response/i-get-systems-response';
import {IGetWaypointResponse} from '../interface/response/i-get-waypoint-response';
import {RequestInterceptor} from '../interface/i-$-open-api';
import {ResponseInterceptor} from '../interface/i-$-open-api';
import {http} from '../function/http';
import {openApi} from '../function/open-api';

export class SystemsService {

    /*
     * Get jump gate details for a waypoint.
     */
    getJumpGate = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetJumpGateResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     */
    getMarket = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetMarketResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems/{systemSymbol}/waypoints/{waypointSymbol}/market`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     */
    getShipyard = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetShipyardResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Get the details of a system.
     */
    getSystem = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetSystemResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems/{systemSymbol}`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Return a list of all systems.
     */
    getSystems = async (queryParameter: IGetSystemsQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetSystemsResponse> => {
    
        const queryParam = [
            {name: 'page', value: queryParameter.page},
            {name: 'limit', value: queryParameter.limit},
        ];
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems`,
                queryParameter: queryParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     */
    getSystemWaypoints = async (queryParameter: IGetSystemWaypointsQueryParameter, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetSystemWaypointsResponse> => {
    
        const queryParam = [
            {name: 'page', value: queryParameter.page},
            {name: 'limit', value: queryParameter.limit},
        ];
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems/{systemSymbol}/waypoints`,
                queryParameter: queryParam,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

    /*
     * View the details of a waypoint.
     */
    getWaypoint = async (interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IGetWaypointResponse> => {
    
        const response = await http({
                method: 'GET',
                url: `${openApi.endpointUrl}/systems/{systemSymbol}/waypoints/{waypointSymbol}`,
                header: {
                    Accept: 'application/json',
                },
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

}
