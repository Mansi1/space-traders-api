/**
 * This file was generated by st-open-api
 */
import {ErrorHandler} from '../interface/i-$-open-api';
import {IRegisterRequest} from '../interface/request/i-register-request';
import {IRegisterResponse} from '../interface/response/i-register-response';
import {RequestInterceptor} from '../interface/i-$-open-api';
import {ResponseInterceptor} from '../interface/i-$-open-api';
import {http} from '../function/http';
import {openApi} from '../function/open-api';

export class RegisterService {

    /*
     * Creates a new agent and ties it to a temporary Account.
     * 
     * The agent symbol is a 3-14 character string that will represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
     * 
     * A new agent will be granted an authorization token, a contract with their starting faction, a command ship with a jump drive, and one hundred thousand credits.
     * 
     * &gt; #### Keep your token safe and secure
     * &gt;
     * &gt; Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
     * 
     * You can accept your contract using the &#x60;&#x2F;my&#x2F;contracts&#x2F;{contractId}&#x2F;accept&#x60; endpoint. You will want to navigate your command ship to a nearby asteroid field and execute the &#x60;&#x2F;my&#x2F;ships&#x2F;{shipSymbol}&#x2F;extract&#x60; endpoint to mine various types of ores and minerals.
     * 
     * Return to the contract destination and execute the &#x60;&#x2F;my&#x2F;ships&#x2F;{shipSymbol}&#x2F;deliver&#x60; endpoint to deposit goods into the contract.
     * 
     * When your contract is fulfilled, you can call &#x60;&#x2F;my&#x2F;contracts&#x2F;{contractId}&#x2F;fulfill&#x60; to retrieve payment.
     */
    register = async (body: IRegisterRequest, interceptor: RequestInterceptor = openApi.requestInterceptor, errorHandler: ErrorHandler = openApi.errorHandler, responseInterceptor: ResponseInterceptor<any> = openApi.responseInterceptor): Promise<IRegisterResponse> => {
    
        const response = await http({
                method: 'POST',
                url: `${openApi.endpointUrl}/register`,
                header: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            },
            interceptor,
            errorHandler,
            responseInterceptor
        );
        return JSON.parse(response);
    };
    

}
