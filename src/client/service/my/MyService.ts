/**
 * This file was generated by st-open-api
 */
import { AcceptContractPathParameter } from '../../interface/parameter/AcceptContractPathParameter'
import { CreateChartPathParameter } from '../../interface/parameter/CreateChartPathParameter'
import { CreateShipShipScanPathParameter } from '../../interface/parameter/CreateShipShipScanPathParameter'
import { CreateShipSystemScanPathParameter } from '../../interface/parameter/CreateShipSystemScanPathParameter'
import { CreateShipWaypointScanPathParameter } from '../../interface/parameter/CreateShipWaypointScanPathParameter'
import { CreateSurveyPathParameter } from '../../interface/parameter/CreateSurveyPathParameter'
import { DeliverContractPathParameter } from '../../interface/parameter/DeliverContractPathParameter'
import { DockShipPathParameter } from '../../interface/parameter/DockShipPathParameter'
import { ExtractResourcesPathParameter } from '../../interface/parameter/ExtractResourcesPathParameter'
import { FulfillContractPathParameter } from '../../interface/parameter/FulfillContractPathParameter'
import { GetContractPathParameter } from '../../interface/parameter/GetContractPathParameter'
import { GetContractsQueryParameter } from '../../interface/parameter/GetContractsQueryParameter'
import { GetMyShipCargoPathParameter } from '../../interface/parameter/GetMyShipCargoPathParameter'
import { GetMyShipPathParameter } from '../../interface/parameter/GetMyShipPathParameter'
import { GetMyShipsQueryParameter } from '../../interface/parameter/GetMyShipsQueryParameter'
import { GetShipCooldownPathParameter } from '../../interface/parameter/GetShipCooldownPathParameter'
import { GetShipNavPathParameter } from '../../interface/parameter/GetShipNavPathParameter'
import { JettisonPathParameter } from '../../interface/parameter/JettisonPathParameter'
import { JumpShipPathParameter } from '../../interface/parameter/JumpShipPathParameter'
import { NavigateShipPathParameter } from '../../interface/parameter/NavigateShipPathParameter'
import { OrbitShipPathParameter } from '../../interface/parameter/OrbitShipPathParameter'
import { PatchShipNavPathParameter } from '../../interface/parameter/PatchShipNavPathParameter'
import { PurchaseCargoPathParameter } from '../../interface/parameter/PurchaseCargoPathParameter'
import { RefuelShipPathParameter } from '../../interface/parameter/RefuelShipPathParameter'
import { SellCargoPathParameter } from '../../interface/parameter/SellCargoPathParameter'
import { ShipRefinePathParameter } from '../../interface/parameter/ShipRefinePathParameter'
import { TransferCargoPathParameter } from '../../interface/parameter/TransferCargoPathParameter'
import { WarpShipPathParameter } from '../../interface/parameter/WarpShipPathParameter'
import { DeliverContractRequest } from '../../interface/request/DeliverContractRequest'
import { ExtractResourcesRequest } from '../../interface/request/ExtractResourcesRequest'
import { JettisonRequest } from '../../interface/request/JettisonRequest'
import { JumpShipRequest } from '../../interface/request/JumpShipRequest'
import { NavigateShipRequest } from '../../interface/request/NavigateShipRequest'
import { PatchShipNavRequest } from '../../interface/request/PatchShipNavRequest'
import { PurchaseCargoRequest } from '../../interface/request/PurchaseCargoRequest'
import { PurchaseShipRequest } from '../../interface/request/PurchaseShipRequest'
import { SellCargoRequest } from '../../interface/request/SellCargoRequest'
import { ShipRefineRequest } from '../../interface/request/ShipRefineRequest'
import { TransferCargoRequest } from '../../interface/request/TransferCargoRequest'
import { WarpShipRequest } from '../../interface/request/WarpShipRequest'
import { AcceptContractResponse } from '../../interface/response/AcceptContractResponse'
import { CreateChartResponse } from '../../interface/response/CreateChartResponse'
import { CreateShipShipScanResponse } from '../../interface/response/CreateShipShipScanResponse'
import { CreateShipSystemScanResponse } from '../../interface/response/CreateShipSystemScanResponse'
import { CreateShipWaypointScanResponse } from '../../interface/response/CreateShipWaypointScanResponse'
import { CreateSurveyResponse } from '../../interface/response/CreateSurveyResponse'
import { DeliverContractResponse } from '../../interface/response/DeliverContractResponse'
import { DockShipResponse } from '../../interface/response/DockShipResponse'
import { ExtractResourcesResponse } from '../../interface/response/ExtractResourcesResponse'
import { FulfillContractResponse } from '../../interface/response/FulfillContractResponse'
import { GetContractResponse } from '../../interface/response/GetContractResponse'
import { GetContractsResponse } from '../../interface/response/GetContractsResponse'
import { GetMyAgentResponse } from '../../interface/response/GetMyAgentResponse'
import { GetMyShipCargoResponse } from '../../interface/response/GetMyShipCargoResponse'
import { GetMyShipResponse } from '../../interface/response/GetMyShipResponse'
import { GetMyShipsResponse } from '../../interface/response/GetMyShipsResponse'
import { GetShipCooldownResponse } from '../../interface/response/GetShipCooldownResponse'
import { GetShipNavResponse } from '../../interface/response/GetShipNavResponse'
import { JettisonResponse } from '../../interface/response/JettisonResponse'
import { JumpShipResponse } from '../../interface/response/JumpShipResponse'
import { NavigateShipResponse } from '../../interface/response/NavigateShipResponse'
import { OrbitShipResponse } from '../../interface/response/OrbitShipResponse'
import { PatchShipNavResponse } from '../../interface/response/PatchShipNavResponse'
import { PurchaseCargoResponse } from '../../interface/response/PurchaseCargoResponse'
import { PurchaseShipResponse } from '../../interface/response/PurchaseShipResponse'
import { RefuelShipResponse } from '../../interface/response/RefuelShipResponse'
import { SellCargoResponse } from '../../interface/response/SellCargoResponse'
import { ShipRefineResponse } from '../../interface/response/ShipRefineResponse'
import { TransferCargoResponse } from '../../interface/response/TransferCargoResponse'
import { WarpShipResponse } from '../../interface/response/WarpShipResponse'

export class MyService {

    constructor(public config: {
        send: <T = void>(request: {
            method: string;
            url: string;
            queryParameter?: any;
            urlParameter?: any;
            headerParameter?: any;
            cookieParameter?: any;
            body?: any;
        }) => Promise<T>
    }) {
    }

    /*
     * Accept a contract.
     */
    acceptContract = async (urlParameter: AcceptContractPathParameter, ): Promise<AcceptContractResponse> => {
        return this.config.send<AcceptContractResponse>({
                method: 'POST',
                url: '/my/contracts/{contractId}/accept',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Command a ship to chart the current waypoint.
     * 
     * Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.
     * 
     * Charting a location will record your agent as the one who created the chart.
     */
    createChart = async (urlParameter: CreateChartPathParameter, ): Promise<CreateChartResponse> => {
        return this.config.send<CreateChartResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/chart',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Activate your ship's sensor arrays to scan for ship information.
     */
    createShipShipScan = async (urlParameter: CreateShipShipScanPathParameter, ): Promise<CreateShipShipScanResponse> => {
        return this.config.send<CreateShipShipScanResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/scan/ships',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Activate your ship's sensor arrays to scan for system information.
     */
    createShipSystemScan = async (urlParameter: CreateShipSystemScanPathParameter, ): Promise<CreateShipSystemScanResponse> => {
        return this.config.send<CreateShipSystemScanResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/scan/systems',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Activate your ship's sensor arrays to scan for waypoint information.
     */
    createShipWaypointScan = async (urlParameter: CreateShipWaypointScanPathParameter, ): Promise<CreateShipWaypointScanResponse> => {
        return this.config.send<CreateShipWaypointScanResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/scan/waypoints',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
     * 
     * Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     */
    createSurvey = async (urlParameter: CreateSurveyPathParameter, ): Promise<CreateSurveyResponse> => {
        return this.config.send<CreateSurveyResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/survey',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Deliver cargo on a given contract.
     */
    deliverContract = async (urlParameter: DeliverContractPathParameter, body: DeliverContractRequest, ): Promise<DeliverContractResponse> => {
        return this.config.send<DeliverContractResponse>({
                method: 'POST',
                url: '/my/contracts/{contractId}/deliver',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     */
    dockShip = async (urlParameter: DockShipPathParameter, ): Promise<DockShipResponse> => {
        return this.config.send<DockShipResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/dock',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     */
    extractResources = async (urlParameter: ExtractResourcesPathParameter, body: ExtractResourcesRequest, ): Promise<ExtractResourcesResponse> => {
        return this.config.send<ExtractResourcesResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/extract',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Fulfill a contract
     */
    fulfillContract = async (urlParameter: FulfillContractPathParameter, ): Promise<FulfillContractResponse> => {
        return this.config.send<FulfillContractResponse>({
                method: 'POST',
                url: '/my/contracts/{contractId}/fulfill',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Get the details of a contract by ID.
     */
    getContract = async (urlParameter: GetContractPathParameter, ): Promise<GetContractResponse> => {
        return this.config.send<GetContractResponse>({
                method: 'GET',
                url: '/my/contracts/{contractId}',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * List all of your contracts.
     */
    getContracts = async (queryParameter: GetContractsQueryParameter, ): Promise<GetContractsResponse> => {
        return this.config.send<GetContractsResponse>({
                method: 'GET',
                url: '/my/contracts',
                urlParameter: {},
                queryParameter: queryParameter,
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Fetch your agent's details.
     */
    getMyAgent = async (): Promise<GetMyAgentResponse> => {
        return this.config.send<GetMyAgentResponse>({
                method: 'GET',
                url: '/my/agent',
                urlParameter: {},
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Retrieve the details of your ship.
     */
    getMyShip = async (urlParameter: GetMyShipPathParameter, ): Promise<GetMyShipResponse> => {
        return this.config.send<GetMyShipResponse>({
                method: 'GET',
                url: '/my/ships/{shipSymbol}',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Retrieve the cargo of your ship.
     */
    getMyShipCargo = async (urlParameter: GetMyShipCargoPathParameter, ): Promise<GetMyShipCargoResponse> => {
        return this.config.send<GetMyShipCargoResponse>({
                method: 'GET',
                url: '/my/ships/{shipSymbol}/cargo',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Retrieve all of your ships.
     */
    getMyShips = async (queryParameter: GetMyShipsQueryParameter, ): Promise<GetMyShipsResponse> => {
        return this.config.send<GetMyShipsResponse>({
                method: 'GET',
                url: '/my/ships',
                urlParameter: {},
                queryParameter: queryParameter,
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
     * 
     * Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
     * 
     * Response returns a 204 status code (no-content) when the ship has no cooldown.
     */
    getShipCooldown = async (urlParameter: GetShipCooldownPathParameter, ): Promise<GetShipCooldownResponse> => {
        return this.config.send<GetShipCooldownResponse>({
                method: 'GET',
                url: '/my/ships/{shipSymbol}/cooldown',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Get the current nav status of a ship.
     */
    getShipNav = async (urlParameter: GetShipNavPathParameter, ): Promise<GetShipNavResponse> => {
        return this.config.send<GetShipNavResponse>({
                method: 'GET',
                url: '/my/ships/{shipSymbol}/nav',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Jettison cargo from your ship's cargo hold.
     */
    jettison = async (urlParameter: JettisonPathParameter, body: JettisonRequest, ): Promise<JettisonResponse> => {
        return this.config.send<JettisonResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/jettison',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
     */
    jumpShip = async (urlParameter: JumpShipPathParameter, body: JumpShipRequest, ): Promise<JumpShipResponse> => {
        return this.config.send<JumpShipResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/jump',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     * 
     * To travel between systems, see the ship's warp or jump actions.
     */
    navigateShip = async (urlParameter: NavigateShipPathParameter, body: NavigateShipRequest, ): Promise<NavigateShipResponse> => {
        return this.config.send<NavigateShipResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/navigate',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     */
    orbitShip = async (urlParameter: OrbitShipPathParameter, ): Promise<OrbitShipResponse> => {
        return this.config.send<OrbitShipResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/orbit',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Update the nav data of a ship, such as the flight mode.
     */
    patchShipNav = async (urlParameter: PatchShipNavPathParameter, body: PatchShipNavRequest, ): Promise<PatchShipNavResponse> => {
        return this.config.send<PatchShipNavResponse>({
                method: 'PATCH',
                url: '/my/ships/{shipSymbol}/nav',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Purchase cargo.
     */
    purchaseCargo = async (urlParameter: PurchaseCargoPathParameter, body: PurchaseCargoRequest, ): Promise<PurchaseCargoResponse> => {
        return this.config.send<PurchaseCargoResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/purchase',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Purchase a ship
     */
    purchaseShip = async (body: PurchaseShipRequest, ): Promise<PurchaseShipResponse> => {
        return this.config.send<PurchaseShipResponse>({
                method: 'POST',
                url: '/my/ships',
                urlParameter: {},
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Refuel your ship from the local market.
     */
    refuelShip = async (urlParameter: RefuelShipPathParameter, ): Promise<RefuelShipResponse> => {
        return this.config.send<RefuelShipResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/refuel',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'content-type': 'application/json',
                },
            }
        );
    };

    /*
     * Sell cargo.
     */
    sellCargo = async (urlParameter: SellCargoPathParameter, body: SellCargoRequest, ): Promise<SellCargoResponse> => {
        return this.config.send<SellCargoResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/sell',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     */
    shipRefine = async (urlParameter: ShipRefinePathParameter, body: ShipRefineRequest, ): Promise<ShipRefineResponse> => {
        return this.config.send<ShipRefineResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/refine',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Transfer cargo between ships.
     */
    transferCargo = async (urlParameter: TransferCargoPathParameter, body: TransferCargoRequest, ): Promise<TransferCargoResponse> => {
        return this.config.send<TransferCargoResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/transfer',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

    /*
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     */
    warpShip = async (urlParameter: WarpShipPathParameter, body: WarpShipRequest, ): Promise<WarpShipResponse> => {
        return this.config.send<WarpShipResponse>({
                method: 'POST',
                url: '/my/ships/{shipSymbol}/warp',
                urlParameter: urlParameter,
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

}
