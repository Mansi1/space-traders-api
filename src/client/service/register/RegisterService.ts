/**
 * This file was generated by st-open-api
 */
import { RegisterRequest } from '../../interface/request/RegisterRequest'
import { RegisterResponse } from '../../interface/response/RegisterResponse'

export class RegisterService {

    constructor(public config: {
        send: <T = void>(request: {
            method: string;
            url: string;
            queryParameter?: any;
            urlParameter?: any;
            headerParameter?: any;
            cookieParameter?: any;
            body?: any;
        }) => Promise<T>
    }) {
    }

    /*
     * Creates a new agent and ties it to a temporary Account.
     * 
     * The agent symbol is a 3-14 character string that will represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
     * 
     * A new agent will be granted an authorization token, a contract with their starting faction, a command ship with a jump drive, and one hundred thousand credits.
     * 
     * > #### Keep your token safe and secure
     * >
     * > Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
     * 
     * You can accept your contract using the `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to a nearby asteroid field and execute the `/my/ships/{shipSymbol}/extract` endpoint to mine various types of ores and minerals.
     * 
     * Return to the contract destination and execute the `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract.
     * 
     * When your contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
     */
    register = async (body: RegisterRequest, ): Promise<RegisterResponse> => {
        return this.config.send<RegisterResponse>({
                method: 'POST',
                url: '/register',
                urlParameter: {},
                queryParameter: {},
                headerParameter: {
                    'accept': 'application/json',
                    'content-type': 'application/json',
                },
                body,
            }
        );
    };

}
